GENERAL
======================
To compile and run the proxy:
$ cd Project_repo
$ make
$ build/http-proxy
$ make clean


IMPLEMENTATION
======================
Daniel's
connection-handler.h: handles all the connection setup and teardown.
	serverStartListen - opens up listening port and starts listening on the specified port
	serverNegotiateClientConnection - sets up the connection to remote host for getting data
	serverRetrieveRemoteData - gets the specified file from the remote host after connection has been set up
	serverClientConnection (deprecated) - gets client requests and fowards to remote host. Instead of handling
all client request forwarding in one function, the code has been copied to the ProcessRequest function so
threads are easier to implement.


Orlando's
cache.h: This file provides the function prototypes implemented in cache.cc. 
	SaveToCache(data,url) processes all incoming responses and decides
if they can be cached: They have a 200 status and have an expiration date older than the
current date.
	GetDataFromCache(request,returnExpired) returns empty
string if the file doesn't exist, or if the file has expired (In which case adds the
if-modified-since header to the request).
All file operations use boost's lock features to avoid race conditions. All date operations
are also performed using boost's libraries.
web-request.h: This file provides a function prototype implemented in web-request.cc.
	GetFromRemoteServer(request,socket) uses the provided socket to send data to the web server
and read from it the incoming response. It then returns whatever SaveToCache returns.

Kunaal's
Main function: This is the main function, and is responsible for creating the socket, binding 
it and listening for incoming connnections on the given port (14805). It also contains the main
loop which accepts up to 10 incoming connections. Each connection is persistent and creates a 
separate process. An array is used to track the live processes to ensure that the number of 
connections <= 10. Zombie processes are identified using waitpid (to update the array).

Team's
	ProcessRequest(request, flag) will return an http response ready to be sent to de client.
It takes a request. The second argument (out) is set to 1 if the connection has to be closed
	HandleClientConnection(socket) will handle a connection with a client. This function will
terminate the connection until the client decides or an error occurs.
	receive-timeout.h:
	recvtimeout(int,char*,int) contains the function used to call recv with a timeout of 30 seconds.
